"""
  I will simply use a list of dictionaries to represent the relational database to minimize external dependencies.
  Easiest would be to use the dataframe object in the pandas library and use a jupyter notebook to run the code blocks.
"""

import csv
from decimal import *
import datetime
from itertools import groupby, count

path_to_csv = './input.csv'

input = open(path_to_csv)
csvin = csv.reader(input, delimiter=',', quotechar='"', skipinitialspace=True)

data = [row for row in csvin]

header = data.pop(0)

print(header)

data.pop(0)

table = list()

for row in data:
  rowdict = dict(zip(header, row))
  rowdict['User ID'] = int(rowdict['User ID'])
  rowdict['Product'] = rowdict['Product'].strip()
  rowdict['Quantity'] = Decimal(rowdict['Quantity'])
  rowdict['Unit Price'] = Decimal(rowdict['Unit Price'])
  year, month, day = rowdict['Date'].split(sep='-')
  rowdict['Date'] = datetime.date(year=int(year), month=int(month), day=int(day))
  table.append(rowdict)

print(table[0])

user_lowest_id = min([row['User ID'] for row in table])

values = [row['Quantity'] for row in table if row['User ID'] == user_lowest_id]

avg = sum(values) // len(values)

print(avg)

f = open('average_quantity.txt', 'w+')
f.write(f"{user_lowest_id}, {avg}")
f.close()

"""
Calculate the best revenue generating product for each date and write the date,
product name and total revenue to a file called top_products.txt , sorted by date in
descending order.
For example, for the date 2022-04-15, the best selling product was Apple and the
total revenue generated by Apple sales was 13.86 (1.5x6.3 + 0.7x6.3)
"""

best = dict()

for date, rows in groupby(sorted(table, key=lambda k: k['Date'], reverse=True), lambda x: x['Date']):
  print(date)
  best[date] = dict()
  #print(list(rows))
  for product, rows in groupby(rows, lambda row: row['Product']):
    print(f"\t{product}:", end=" ")
    best[date] = dict()
    #print(best)
    #print(list(rows))
    for row in rows:
      print(f"{row['Unit Price'] * row['Quantity']}")
    #print(best[date].keys())

#print(best)